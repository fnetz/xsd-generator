//!Generated by dt-xsd-generator 0.1.0
#![allow(dead_code)]
#[derive(Debug)]
pub struct TypeType(pub String);
#[derive(Debug)]
pub struct HrefType(pub dt_builtins::AnyURI);
#[derive(Debug)]
pub struct RoleType(pub dt_builtins::AnyURI);
#[derive(Debug)]
pub struct ArcroleType(pub dt_builtins::AnyURI);
#[derive(Debug)]
pub struct TitleAttrType(pub String);
#[derive(Debug)]
pub struct ShowType(pub String);
#[derive(Debug)]
pub struct ActuateType(pub String);
#[derive(Debug)]
pub struct LabelType(pub String);
#[derive(Debug)]
pub struct FromType(pub String);
#[derive(Debug)]
pub struct ToType(pub String);
#[derive(Debug)]
pub struct Simple {
    pub wildcard: Vec<()>,
    pub r#type: Option<TypeType>,
    pub href: Option<HrefType>,
    pub role: Option<RoleType>,
    pub arcrole: Option<ArcroleType>,
    pub title: Option<TitleAttrType>,
    pub show: Option<ShowType>,
    pub actuate: Option<ActuateType>,
}
#[derive(Debug)]
pub enum ExtendedInner {
    Title(TitleEltType),
    Resource(ResourceType),
    Locator(LocatorType),
    Arc(ArcType),
}
#[derive(Debug)]
pub struct Extended {
    inner: ExtendedInner,
    pub r#type: TypeType,
    pub role: Option<RoleType>,
    pub title: Option<TitleAttrType>,
}
#[derive(Debug)]
pub struct LangInner(pub String);
#[derive(Debug)]
pub enum Lang {
    Language(dt_builtins::Language),
    Unnamed(LangInner),
}
#[derive(Debug)]
pub struct TitleEltType {
    pub wildcard: Vec<()>,
    pub r#type: TypeType,
    pub lang: Option<Lang>,
}
#[derive(Debug)]
pub struct ResourceType {
    pub wildcard: Vec<()>,
    pub r#type: TypeType,
    pub role: Option<RoleType>,
    pub title: Option<TitleAttrType>,
    pub label: Option<LabelType>,
}
#[derive(Debug)]
pub struct LocatorType {
    pub title: Vec<TitleEltType>,
    pub r#type: TypeType,
    pub href: HrefType,
    pub role: Option<RoleType>,
    pub title_attr: Option<TitleAttrType>,
    pub label: Option<LabelType>,
}
#[derive(Debug)]
pub struct ArcType {
    pub title: Vec<TitleEltType>,
    pub r#type: TypeType,
    pub arcrole: Option<ArcroleType>,
    pub title_attr: Option<TitleAttrType>,
    pub show: Option<ShowType>,
    pub actuate: Option<ActuateType>,
    pub from: Option<FromType>,
    pub to: Option<ToType>,
}
#[derive(Debug)]
pub struct Status(pub String);
#[derive(Debug)]
pub struct BugUri(pub dt_builtins::AnyURI);
#[derive(Debug)]
pub struct TestOutcome(pub String);
#[derive(Debug)]
pub struct ExpectedOutcomeInner(pub String);
#[derive(Debug)]
pub enum ExpectedOutcome {
    TestOutcome(TestOutcome),
    Unnamed(ExpectedOutcomeInner),
}
#[derive(Debug)]
pub struct VersionInfo(pub Vec<VersionToken>);
#[derive(Debug)]
pub struct KnownXsdVersion(pub String);
#[derive(Debug)]
pub struct Xsd10Editions(pub String);
#[derive(Debug)]
pub struct XmlSubstrate(pub String);
#[derive(Debug)]
pub struct UnicodeVersions(pub String);
#[derive(Debug)]
pub struct RuntimeSchemaError(pub String);
#[derive(Debug)]
pub struct XpathInCta(pub String);
#[derive(Debug)]
pub struct XdmFiltering(pub String);
#[derive(Debug)]
pub enum KnownToken {
    KnownXsdVersion(KnownXsdVersion),
    Xsd10Editions(Xsd10Editions),
    XmlSubstrate(XmlSubstrate),
    UnicodeVersions(UnicodeVersions),
    RuntimeSchemaError(RuntimeSchemaError),
    XpathInCta(XpathInCta),
    XdmFiltering(XdmFiltering),
}
#[derive(Debug)]
pub enum VersionToken {
    KnownToken(KnownToken),
    Decimal(dt_builtins::Decimal),
    Nmtoken(dt_builtins::NmToken),
}
#[derive(Debug)]
pub struct StatusEntry {
    pub annotation: Vec<Annotation>,
    pub status: Status,
    pub date: dt_builtins::Date,
    pub bugzilla: Option<BugUri>,
}
#[derive(Debug)]
pub struct Ref {
    pub annotation: Vec<Annotation>,
    pub r#type: Option<TypeType>,
    pub href: Option<HrefType>,
}
#[derive(Debug)]
pub struct Role(pub String);
#[derive(Debug)]
pub struct SchemaDocumentRef {
    pub annotation: Vec<Annotation>,
    pub role: Option<Role>,
    pub r#type: Option<TypeType>,
    pub href: Option<HrefType>,
}
#[derive(Debug)]
pub struct TestSuite {
    pub annotation: Vec<Annotation>,
    pub test_set_ref: Vec<Ref>,
    pub name: dt_builtins::Name,
    pub release_date: dt_builtins::Date,
    pub schema_version: String,
    pub version: Option<VersionInfo>,
}
#[derive(Debug)]
pub struct TestSet {
    pub annotation: Vec<Annotation>,
    pub test_group: Vec<TestGroup>,
    pub contributor: String,
    pub name: dt_builtins::Name,
    pub version: Option<VersionInfo>,
}
#[derive(Debug)]
pub struct TestGroup {
    pub annotation: Vec<Annotation>,
    pub documentation_reference: Vec<Ref>,
    pub schema_test: Option<SchemaTest>,
    pub instance_test: Vec<InstanceTest>,
    pub name: dt_builtins::Name,
    pub version: Option<VersionInfo>,
}
#[derive(Debug)]
pub struct SchemaTest {
    pub annotation: Vec<Annotation>,
    pub schema_document: Vec<SchemaDocumentRef>,
    pub expected: Vec<Expected>,
    pub current: Option<StatusEntry>,
    pub prior: Vec<StatusEntry>,
    pub name: dt_builtins::Name,
    pub version: Option<VersionInfo>,
}
#[derive(Debug)]
pub struct InstanceTest {
    pub annotation: Vec<Annotation>,
    pub instance_document: Ref,
    pub expected: Vec<Expected>,
    pub current: Option<StatusEntry>,
    pub prior: Vec<StatusEntry>,
    pub name: dt_builtins::Name,
    pub version: Option<VersionInfo>,
}
#[derive(Debug)]
pub struct Expected {
    pub validity: ExpectedOutcome,
    pub version: Option<VersionInfo>,
}
#[derive(Debug)]
pub struct PublicationPermission(pub String);
#[derive(Debug)]
pub struct TestSuiteResults {
    pub annotation: Vec<Annotation>,
    pub test_result: Vec<TestResult>,
    pub suite: dt_builtins::Name,
    pub processor: String,
    pub submit_date: dt_builtins::Date,
    pub publication_permission: Option<PublicationPermission>,
}
#[derive(Debug)]
pub struct TestResult {
    pub annotation: Vec<Annotation>,
    pub validity: TestOutcome,
    pub set: dt_builtins::Name,
    pub group: dt_builtins::Name,
    pub test: dt_builtins::Name,
    pub normalized_load: Option<dt_builtins::Decimal>,
}
#[derive(Debug)]
pub enum Annotation {
    Appinfo(Appinfo),
    Documentation(Documentation),
}
#[derive(Debug)]
pub struct Appinfo {
    pub wildcard: (),
    pub source: Option<dt_builtins::AnyURI>,
}
#[derive(Debug)]
pub struct Documentation {
    pub wildcard: (),
    pub source: Option<dt_builtins::AnyURI>,
    pub lang: Option<Lang>,
}
